 to implement the backup options would be within the _get_propstore_props() function. This function is responsible for setting up the PropstoreQuery, 
which retrieves properties from the Propstore. Here, you can add the resilience options using .use_encrypted_backup() and .use_backup_file_before_fetching_from_server() 
to ensure that a backup is used when the Propstore is unavailable.

def _get_propstore_props():
    global __propstore_map
    if not __propstore_map:
        query = PropstoreQuery(_get_propstore_env(), _lps_system).add.coordinates(
            {'application': 'plainid-manage'}
        )
        
        # Add the backup options here
        query.use_encrypted_backup(
            b'YourEncryptionKeyHere', 
            '/path/to/backup_file.txt', 
            24  # optional expiration period in hours
        ).use_backup_file_before_fetching_from_server()
        
        try:
            __propstore_map = query.get_data()
        except Exception as e:
            raise Exception("Error retrieving propstore properties, ")
        __log.info("Got propstore config of size")
    return __propstore_map


Added Backup Options:

You modified the _get_propstore_props() function to include two new options: .use_encrypted_backup() and .use_backup_file_before_fetching_from_server().
These options were added to the PropstoreQuery object, which is responsible for connecting to the Propstore and retrieving configuration data.
Configured an Encrypted Backup:

The .use_encrypted_backup() option sets up an encrypted backup file that will store configuration data from the Propstore. This backup file is specified by a file path and is protected by an encryption key.
You added a specific file path for this backup, so the Propstore can save a copy of the configuration data there, which will be encrypted for security.
Enabled Fallback to Backup on Server Unavailability:

The .use_backup_file_before_fetching_from_server() option tells the Propstore client to first check the backup file for configuration data before trying to reach the Propstore server.
If the Propstore server is down or unreachable, this option allows your application to use the backup data, ensuring that it continues to run smoothly even if the server is unavailable.
Why You Made These Changes
Resilience Against Downtime:

By setting up a backup, you’re ensuring that your application still has access to the configuration data it needs, even if the Propstore server is temporarily unavailable.
This helps improve the reliability and uptime of your application, as it won’t fail just because the Propstore server isn’t accessible.
Enhanced Security:

The use of .use_encrypted_backup() encrypts the backup file, which is important for protecting sensitive configuration data (like credentials or API keys) from unauthorized access.
This ensures that if the backup file is somehow accessed by an unauthorized person, they won’t be able to read the contents without the encryption key.
Better Performance During Outages:

The .use_backup_file_before_fetching_from_server() option allows the application to skip trying the server when it’s known to be down. This reduces unnecessary delays and lets the application immediately use the backup file.
This approach allows the application to function smoothly during outages, as it has quick access to the data it needs without waiting for the Propstore to come back online.
